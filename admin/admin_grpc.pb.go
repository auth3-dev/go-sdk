// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	CreateIdentity(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*CreateIdentityResponse, error)
	GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error)
	GetIdentityByIdentifier(ctx context.Context, in *GetIdentityByIdentifierRequest, opts ...grpc.CallOption) (*GetIdentityByIdentifierResponse, error)
	GetIdentitiesByAttribute(ctx context.Context, in *GetIdentitiesByAttributeRequest, opts ...grpc.CallOption) (*GetIdentitiesByAttributeResponse, error)
	GetIdentities(ctx context.Context, in *GetIdentitiesRequest, opts ...grpc.CallOption) (*GetIdentitiesResponse, error)
	UpdateIdentity(ctx context.Context, in *UpdateIdentityRequest, opts ...grpc.CallOption) (*UpdateIdentityResponse, error)
	DeleteIdentity(ctx context.Context, in *DeleteIdentityRequest, opts ...grpc.CallOption) (*DeleteIdentityResponse, error)
	GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error)
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	GetTraits(ctx context.Context, in *GetTraitsRequest, opts ...grpc.CallOption) (*GetTraitsResponse, error)
	UpdateTraits(ctx context.Context, in *UpdateTraitsRequest, opts ...grpc.CallOption) (*UpdateTraitsResponse, error)
	GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
	UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...grpc.CallOption) (*UpdateCredentialResponse, error)
	GetIdentityLoginAttempts(ctx context.Context, in *GetIdentityLoginAttemptsRequest, opts ...grpc.CallOption) (*GetIdentityLoginAttemptsResponse, error)
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error)
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	CreateIdSchema(ctx context.Context, in *CreateIdSchemaRequest, opts ...grpc.CallOption) (*CreateIdSchemaResponse, error)
	GetIdSchemas(ctx context.Context, in *GetIdSchemasRequest, opts ...grpc.CallOption) (*GetIdSchemasResponse, error)
	GetIdSchema(ctx context.Context, in *GetIdSchemaRequest, opts ...grpc.CallOption) (*GetIdSchemaResponse, error)
	GetDefaultIdSchema(ctx context.Context, in *GetDefaultIdSchemaRequest, opts ...grpc.CallOption) (*GetDefaultIdSchemaResponse, error)
	UpdateIdSchema(ctx context.Context, in *UpdateIdSchemaRequest, opts ...grpc.CallOption) (*UpdateIdSchemaResponse, error)
	MarkDefaultIdSchema(ctx context.Context, in *MarkDefaultIdSchemaRequest, opts ...grpc.CallOption) (*MarkDefaultIdSchemaResponse, error)
	DeleteIdSchema(ctx context.Context, in *DeleteIdSchemaRequest, opts ...grpc.CallOption) (*DeleteIdSchemaResponse, error)
	CreateOAuth2Client(ctx context.Context, in *CreateOAuth2ClientRequest, opts ...grpc.CallOption) (*CreateOAuth2ClientResponse, error)
	GetOAuth2Clients(ctx context.Context, in *GetOAuth2ClientsRequest, opts ...grpc.CallOption) (*GetOAuth2ClientsResponse, error)
	UpdateOAuth2Client(ctx context.Context, in *UpdateOAuth2ClientRequest, opts ...grpc.CallOption) (*UpdateOAuth2ClientResponse, error)
	DeleteOAuth2Client(ctx context.Context, in *DeleteOAuth2ClientRequest, opts ...grpc.CallOption) (*DeleteOAuth2ClientResponse, error)
	GetEmailsSetup(ctx context.Context, in *GetEmailsSetupRequest, opts ...grpc.CallOption) (*GetEmailsSetupResponse, error)
	UpdateEmailsSetup(ctx context.Context, in *UpdateEmailsSetupRequest, opts ...grpc.CallOption) (*UpdateEmailsSetupResponse, error)
	GetUserBaseStatistics(ctx context.Context, in *GetUserBaseStatisticsRequest, opts ...grpc.CallOption) (*GetUserBaseStatisticsResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) CreateIdentity(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*CreateIdentityResponse, error) {
	out := new(CreateIdentityResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/CreateIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error) {
	out := new(GetIdentityResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetIdentityByIdentifier(ctx context.Context, in *GetIdentityByIdentifierRequest, opts ...grpc.CallOption) (*GetIdentityByIdentifierResponse, error) {
	out := new(GetIdentityByIdentifierResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentityByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetIdentitiesByAttribute(ctx context.Context, in *GetIdentitiesByAttributeRequest, opts ...grpc.CallOption) (*GetIdentitiesByAttributeResponse, error) {
	out := new(GetIdentitiesByAttributeResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentitiesByAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetIdentities(ctx context.Context, in *GetIdentitiesRequest, opts ...grpc.CallOption) (*GetIdentitiesResponse, error) {
	out := new(GetIdentitiesResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateIdentity(ctx context.Context, in *UpdateIdentityRequest, opts ...grpc.CallOption) (*UpdateIdentityResponse, error) {
	out := new(UpdateIdentityResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/UpdateIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteIdentity(ctx context.Context, in *DeleteIdentityRequest, opts ...grpc.CallOption) (*DeleteIdentityResponse, error) {
	out := new(DeleteIdentityResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/DeleteIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAddresses(ctx context.Context, in *GetAddressesRequest, opts ...grpc.CallOption) (*GetAddressesResponse, error) {
	out := new(GetAddressesResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetTraits(ctx context.Context, in *GetTraitsRequest, opts ...grpc.CallOption) (*GetTraitsResponse, error) {
	out := new(GetTraitsResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetTraits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateTraits(ctx context.Context, in *UpdateTraitsRequest, opts ...grpc.CallOption) (*UpdateTraitsResponse, error) {
	out := new(UpdateTraitsResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/UpdateTraits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...grpc.CallOption) (*UpdateCredentialResponse, error) {
	out := new(UpdateCredentialResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/UpdateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetIdentityLoginAttempts(ctx context.Context, in *GetIdentityLoginAttemptsRequest, opts ...grpc.CallOption) (*GetIdentityLoginAttemptsResponse, error) {
	out := new(GetIdentityLoginAttemptsResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentityLoginAttempts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsResponse, error) {
	out := new(GetConnectionsResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateIdSchema(ctx context.Context, in *CreateIdSchemaRequest, opts ...grpc.CallOption) (*CreateIdSchemaResponse, error) {
	out := new(CreateIdSchemaResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/CreateIdSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetIdSchemas(ctx context.Context, in *GetIdSchemasRequest, opts ...grpc.CallOption) (*GetIdSchemasResponse, error) {
	out := new(GetIdSchemasResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetIdSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetIdSchema(ctx context.Context, in *GetIdSchemaRequest, opts ...grpc.CallOption) (*GetIdSchemaResponse, error) {
	out := new(GetIdSchemaResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetIdSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDefaultIdSchema(ctx context.Context, in *GetDefaultIdSchemaRequest, opts ...grpc.CallOption) (*GetDefaultIdSchemaResponse, error) {
	out := new(GetDefaultIdSchemaResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetDefaultIdSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateIdSchema(ctx context.Context, in *UpdateIdSchemaRequest, opts ...grpc.CallOption) (*UpdateIdSchemaResponse, error) {
	out := new(UpdateIdSchemaResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/UpdateIdSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MarkDefaultIdSchema(ctx context.Context, in *MarkDefaultIdSchemaRequest, opts ...grpc.CallOption) (*MarkDefaultIdSchemaResponse, error) {
	out := new(MarkDefaultIdSchemaResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/MarkDefaultIdSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteIdSchema(ctx context.Context, in *DeleteIdSchemaRequest, opts ...grpc.CallOption) (*DeleteIdSchemaResponse, error) {
	out := new(DeleteIdSchemaResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/DeleteIdSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateOAuth2Client(ctx context.Context, in *CreateOAuth2ClientRequest, opts ...grpc.CallOption) (*CreateOAuth2ClientResponse, error) {
	out := new(CreateOAuth2ClientResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/CreateOAuth2Client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetOAuth2Clients(ctx context.Context, in *GetOAuth2ClientsRequest, opts ...grpc.CallOption) (*GetOAuth2ClientsResponse, error) {
	out := new(GetOAuth2ClientsResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetOAuth2Clients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateOAuth2Client(ctx context.Context, in *UpdateOAuth2ClientRequest, opts ...grpc.CallOption) (*UpdateOAuth2ClientResponse, error) {
	out := new(UpdateOAuth2ClientResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/UpdateOAuth2Client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteOAuth2Client(ctx context.Context, in *DeleteOAuth2ClientRequest, opts ...grpc.CallOption) (*DeleteOAuth2ClientResponse, error) {
	out := new(DeleteOAuth2ClientResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/DeleteOAuth2Client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetEmailsSetup(ctx context.Context, in *GetEmailsSetupRequest, opts ...grpc.CallOption) (*GetEmailsSetupResponse, error) {
	out := new(GetEmailsSetupResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetEmailsSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateEmailsSetup(ctx context.Context, in *UpdateEmailsSetupRequest, opts ...grpc.CallOption) (*UpdateEmailsSetupResponse, error) {
	out := new(UpdateEmailsSetupResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/UpdateEmailsSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserBaseStatistics(ctx context.Context, in *GetUserBaseStatisticsRequest, opts ...grpc.CallOption) (*GetUserBaseStatisticsResponse, error) {
	out := new(GetUserBaseStatisticsResponse)
	err := c.cc.Invoke(ctx, "/depot.devtools.auth.v0.identity.admin.Admin/GetUserBaseStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	CreateIdentity(context.Context, *CreateIdentityRequest) (*CreateIdentityResponse, error)
	GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error)
	GetIdentityByIdentifier(context.Context, *GetIdentityByIdentifierRequest) (*GetIdentityByIdentifierResponse, error)
	GetIdentitiesByAttribute(context.Context, *GetIdentitiesByAttributeRequest) (*GetIdentitiesByAttributeResponse, error)
	GetIdentities(context.Context, *GetIdentitiesRequest) (*GetIdentitiesResponse, error)
	UpdateIdentity(context.Context, *UpdateIdentityRequest) (*UpdateIdentityResponse, error)
	DeleteIdentity(context.Context, *DeleteIdentityRequest) (*DeleteIdentityResponse, error)
	GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesResponse, error)
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error)
	GetTraits(context.Context, *GetTraitsRequest) (*GetTraitsResponse, error)
	UpdateTraits(context.Context, *UpdateTraitsRequest) (*UpdateTraitsResponse, error)
	GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error)
	UpdateCredential(context.Context, *UpdateCredentialRequest) (*UpdateCredentialResponse, error)
	GetIdentityLoginAttempts(context.Context, *GetIdentityLoginAttemptsRequest) (*GetIdentityLoginAttemptsResponse, error)
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error)
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	CreateIdSchema(context.Context, *CreateIdSchemaRequest) (*CreateIdSchemaResponse, error)
	GetIdSchemas(context.Context, *GetIdSchemasRequest) (*GetIdSchemasResponse, error)
	GetIdSchema(context.Context, *GetIdSchemaRequest) (*GetIdSchemaResponse, error)
	GetDefaultIdSchema(context.Context, *GetDefaultIdSchemaRequest) (*GetDefaultIdSchemaResponse, error)
	UpdateIdSchema(context.Context, *UpdateIdSchemaRequest) (*UpdateIdSchemaResponse, error)
	MarkDefaultIdSchema(context.Context, *MarkDefaultIdSchemaRequest) (*MarkDefaultIdSchemaResponse, error)
	DeleteIdSchema(context.Context, *DeleteIdSchemaRequest) (*DeleteIdSchemaResponse, error)
	CreateOAuth2Client(context.Context, *CreateOAuth2ClientRequest) (*CreateOAuth2ClientResponse, error)
	GetOAuth2Clients(context.Context, *GetOAuth2ClientsRequest) (*GetOAuth2ClientsResponse, error)
	UpdateOAuth2Client(context.Context, *UpdateOAuth2ClientRequest) (*UpdateOAuth2ClientResponse, error)
	DeleteOAuth2Client(context.Context, *DeleteOAuth2ClientRequest) (*DeleteOAuth2ClientResponse, error)
	GetEmailsSetup(context.Context, *GetEmailsSetupRequest) (*GetEmailsSetupResponse, error)
	UpdateEmailsSetup(context.Context, *UpdateEmailsSetupRequest) (*UpdateEmailsSetupResponse, error)
	GetUserBaseStatistics(context.Context, *GetUserBaseStatisticsRequest) (*GetUserBaseStatisticsResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) CreateIdentity(context.Context, *CreateIdentityRequest) (*CreateIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentity not implemented")
}
func (UnimplementedAdminServer) GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedAdminServer) GetIdentityByIdentifier(context.Context, *GetIdentityByIdentifierRequest) (*GetIdentityByIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityByIdentifier not implemented")
}
func (UnimplementedAdminServer) GetIdentitiesByAttribute(context.Context, *GetIdentitiesByAttributeRequest) (*GetIdentitiesByAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentitiesByAttribute not implemented")
}
func (UnimplementedAdminServer) GetIdentities(context.Context, *GetIdentitiesRequest) (*GetIdentitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentities not implemented")
}
func (UnimplementedAdminServer) UpdateIdentity(context.Context, *UpdateIdentityRequest) (*UpdateIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentity not implemented")
}
func (UnimplementedAdminServer) DeleteIdentity(context.Context, *DeleteIdentityRequest) (*DeleteIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentity not implemented")
}
func (UnimplementedAdminServer) GetAddresses(context.Context, *GetAddressesRequest) (*GetAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddresses not implemented")
}
func (UnimplementedAdminServer) GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedAdminServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedAdminServer) GetTraits(context.Context, *GetTraitsRequest) (*GetTraitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraits not implemented")
}
func (UnimplementedAdminServer) UpdateTraits(context.Context, *UpdateTraitsRequest) (*UpdateTraitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTraits not implemented")
}
func (UnimplementedAdminServer) GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedAdminServer) UpdateCredential(context.Context, *UpdateCredentialRequest) (*UpdateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedAdminServer) GetIdentityLoginAttempts(context.Context, *GetIdentityLoginAttemptsRequest) (*GetIdentityLoginAttemptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityLoginAttempts not implemented")
}
func (UnimplementedAdminServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedAdminServer) GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedAdminServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedAdminServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedAdminServer) CreateIdSchema(context.Context, *CreateIdSchemaRequest) (*CreateIdSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdSchema not implemented")
}
func (UnimplementedAdminServer) GetIdSchemas(context.Context, *GetIdSchemasRequest) (*GetIdSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdSchemas not implemented")
}
func (UnimplementedAdminServer) GetIdSchema(context.Context, *GetIdSchemaRequest) (*GetIdSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdSchema not implemented")
}
func (UnimplementedAdminServer) GetDefaultIdSchema(context.Context, *GetDefaultIdSchemaRequest) (*GetDefaultIdSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultIdSchema not implemented")
}
func (UnimplementedAdminServer) UpdateIdSchema(context.Context, *UpdateIdSchemaRequest) (*UpdateIdSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdSchema not implemented")
}
func (UnimplementedAdminServer) MarkDefaultIdSchema(context.Context, *MarkDefaultIdSchemaRequest) (*MarkDefaultIdSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkDefaultIdSchema not implemented")
}
func (UnimplementedAdminServer) DeleteIdSchema(context.Context, *DeleteIdSchemaRequest) (*DeleteIdSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdSchema not implemented")
}
func (UnimplementedAdminServer) CreateOAuth2Client(context.Context, *CreateOAuth2ClientRequest) (*CreateOAuth2ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuth2Client not implemented")
}
func (UnimplementedAdminServer) GetOAuth2Clients(context.Context, *GetOAuth2ClientsRequest) (*GetOAuth2ClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuth2Clients not implemented")
}
func (UnimplementedAdminServer) UpdateOAuth2Client(context.Context, *UpdateOAuth2ClientRequest) (*UpdateOAuth2ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOAuth2Client not implemented")
}
func (UnimplementedAdminServer) DeleteOAuth2Client(context.Context, *DeleteOAuth2ClientRequest) (*DeleteOAuth2ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAuth2Client not implemented")
}
func (UnimplementedAdminServer) GetEmailsSetup(context.Context, *GetEmailsSetupRequest) (*GetEmailsSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailsSetup not implemented")
}
func (UnimplementedAdminServer) UpdateEmailsSetup(context.Context, *UpdateEmailsSetupRequest) (*UpdateEmailsSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailsSetup not implemented")
}
func (UnimplementedAdminServer) GetUserBaseStatistics(context.Context, *GetUserBaseStatisticsRequest) (*GetUserBaseStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBaseStatistics not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_CreateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/CreateIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateIdentity(ctx, req.(*CreateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetIdentity(ctx, req.(*GetIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetIdentityByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityByIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetIdentityByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentityByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetIdentityByIdentifier(ctx, req.(*GetIdentityByIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetIdentitiesByAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentitiesByAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetIdentitiesByAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentitiesByAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetIdentitiesByAttribute(ctx, req.(*GetIdentitiesByAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetIdentities(ctx, req.(*GetIdentitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/UpdateIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateIdentity(ctx, req.(*UpdateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/DeleteIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteIdentity(ctx, req.(*DeleteIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAddresses(ctx, req.(*GetAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetTraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetTraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetTraits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetTraits(ctx, req.(*GetTraitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateTraits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateTraits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/UpdateTraits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateTraits(ctx, req.(*UpdateTraitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCredentials(ctx, req.(*GetCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/UpdateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateCredential(ctx, req.(*UpdateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetIdentityLoginAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityLoginAttemptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetIdentityLoginAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetIdentityLoginAttempts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetIdentityLoginAttempts(ctx, req.(*GetIdentityLoginAttemptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetConnections(ctx, req.(*GetConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateIdSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateIdSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/CreateIdSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateIdSchema(ctx, req.(*CreateIdSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetIdSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetIdSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetIdSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetIdSchemas(ctx, req.(*GetIdSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetIdSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetIdSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetIdSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetIdSchema(ctx, req.(*GetIdSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDefaultIdSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultIdSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDefaultIdSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetDefaultIdSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDefaultIdSchema(ctx, req.(*GetDefaultIdSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateIdSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateIdSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/UpdateIdSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateIdSchema(ctx, req.(*UpdateIdSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MarkDefaultIdSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkDefaultIdSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MarkDefaultIdSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/MarkDefaultIdSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MarkDefaultIdSchema(ctx, req.(*MarkDefaultIdSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteIdSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteIdSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/DeleteIdSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteIdSchema(ctx, req.(*DeleteIdSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateOAuth2Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOAuth2ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateOAuth2Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/CreateOAuth2Client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateOAuth2Client(ctx, req.(*CreateOAuth2ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetOAuth2Clients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuth2ClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetOAuth2Clients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetOAuth2Clients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetOAuth2Clients(ctx, req.(*GetOAuth2ClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateOAuth2Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOAuth2ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateOAuth2Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/UpdateOAuth2Client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateOAuth2Client(ctx, req.(*UpdateOAuth2ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteOAuth2Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOAuth2ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteOAuth2Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/DeleteOAuth2Client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteOAuth2Client(ctx, req.(*DeleteOAuth2ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetEmailsSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailsSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetEmailsSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetEmailsSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetEmailsSetup(ctx, req.(*GetEmailsSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateEmailsSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailsSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateEmailsSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/UpdateEmailsSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateEmailsSetup(ctx, req.(*UpdateEmailsSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserBaseStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBaseStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserBaseStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depot.devtools.auth.v0.identity.admin.Admin/GetUserBaseStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserBaseStatistics(ctx, req.(*GetUserBaseStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "depot.devtools.auth.v0.identity.admin.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdentity",
			Handler:    _Admin_CreateIdentity_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _Admin_GetIdentity_Handler,
		},
		{
			MethodName: "GetIdentityByIdentifier",
			Handler:    _Admin_GetIdentityByIdentifier_Handler,
		},
		{
			MethodName: "GetIdentitiesByAttribute",
			Handler:    _Admin_GetIdentitiesByAttribute_Handler,
		},
		{
			MethodName: "GetIdentities",
			Handler:    _Admin_GetIdentities_Handler,
		},
		{
			MethodName: "UpdateIdentity",
			Handler:    _Admin_UpdateIdentity_Handler,
		},
		{
			MethodName: "DeleteIdentity",
			Handler:    _Admin_DeleteIdentity_Handler,
		},
		{
			MethodName: "GetAddresses",
			Handler:    _Admin_GetAddresses_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Admin_GetAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _Admin_UpdateAddress_Handler,
		},
		{
			MethodName: "GetTraits",
			Handler:    _Admin_GetTraits_Handler,
		},
		{
			MethodName: "UpdateTraits",
			Handler:    _Admin_UpdateTraits_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _Admin_GetCredentials_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _Admin_UpdateCredential_Handler,
		},
		{
			MethodName: "GetIdentityLoginAttempts",
			Handler:    _Admin_GetIdentityLoginAttempts_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _Admin_CreateConnection_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _Admin_GetConnections_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _Admin_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _Admin_DeleteConnection_Handler,
		},
		{
			MethodName: "CreateIdSchema",
			Handler:    _Admin_CreateIdSchema_Handler,
		},
		{
			MethodName: "GetIdSchemas",
			Handler:    _Admin_GetIdSchemas_Handler,
		},
		{
			MethodName: "GetIdSchema",
			Handler:    _Admin_GetIdSchema_Handler,
		},
		{
			MethodName: "GetDefaultIdSchema",
			Handler:    _Admin_GetDefaultIdSchema_Handler,
		},
		{
			MethodName: "UpdateIdSchema",
			Handler:    _Admin_UpdateIdSchema_Handler,
		},
		{
			MethodName: "MarkDefaultIdSchema",
			Handler:    _Admin_MarkDefaultIdSchema_Handler,
		},
		{
			MethodName: "DeleteIdSchema",
			Handler:    _Admin_DeleteIdSchema_Handler,
		},
		{
			MethodName: "CreateOAuth2Client",
			Handler:    _Admin_CreateOAuth2Client_Handler,
		},
		{
			MethodName: "GetOAuth2Clients",
			Handler:    _Admin_GetOAuth2Clients_Handler,
		},
		{
			MethodName: "UpdateOAuth2Client",
			Handler:    _Admin_UpdateOAuth2Client_Handler,
		},
		{
			MethodName: "DeleteOAuth2Client",
			Handler:    _Admin_DeleteOAuth2Client_Handler,
		},
		{
			MethodName: "GetEmailsSetup",
			Handler:    _Admin_GetEmailsSetup_Handler,
		},
		{
			MethodName: "UpdateEmailsSetup",
			Handler:    _Admin_UpdateEmailsSetup_Handler,
		},
		{
			MethodName: "GetUserBaseStatistics",
			Handler:    _Admin_GetUserBaseStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/admin/admin.proto",
}
